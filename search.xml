<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>汇编语言1</title>
      <link href="2021/01/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801/"/>
      <url>2021/01/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801/</url>
      
        <content type="html"><![CDATA[<blockquote><p>One man’s ‘magic’ is another man’s engineering.<br>– Robert Heinlein</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这个系列的笔记是关于汇编语言的学习，所用的教材是清华大学出版社出版的<em>汇编语言</em>。主要内容就是来自教科书中的重要概念，练习题以及实验。这本书采用8086CPU来进行教学，学习中用到了DOSBox这款软件。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>汇编语言的核心是汇编指令，汇编语言工作的过程如图：</p><img src="/2021/01/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801/ass.png" class><ol><li><p>存储器</p><ul><li>又称为内存</li><li>存放指令和数据</li></ul></li><li><p>指令和数据</p><ul><li>是应用上的概念(二进制信息)</li><li>比如，内存中的二进制信息1000100111011000，计算机可以把它看成大小为89D8H的数据，也可以看作是指令 mov ax,bx来执行</li><li>1000100111011000 -&gt; 89D8H (数据)， 1000100111011000 -&gt; mov ax,bx(程序)</li></ul></li><li><p>存储单元<br>|   |   |   |   |   |   |   |   |<br> 0    1   2    …   125  126  127</p><ul><li>存储器被分成若干个存储单元，如一个存储器有128个存储单元，编号从0 - 127</li><li>一个单元可以存储一个byte(8bits), 比如0001 0001。上面的存储器的大小就是128个字节</li><li>1KB=1024B, 1MB=1204KB,1GB=1024MB,1TB=1024GB (B代表Byte)</li></ul></li><li><p>CPU对存储器的读写</p><ul><li>CPU需要和芯片交互3种信息<ol><li>存储单元的地址(地址信息)</li><li>器件的选择，读或写的命令(控制信息)</li><li>读或写的数据(数据信息)</li></ol></li><li>CPU和内存在物理上通过导线交互，通常称为总线；在逻辑上分为地址总线，控制总线和数据总线<img src="/2021/01/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801/ass2.png" class>上图的具体步骤为:<ol><li>CPU通过地址总线讲地址信息3发出</li><li>CPU通过控制总线发出内存读命令，选中单元，并通知</li><li>存储器将3号单元中的数据08通过数据线送入CPU</li></ol></li><li>举例:<br>  机器码：10100001 00000011 00000000<br>  对应汇编：MOV AX,[3]<br>  含义：传送3号单元的内容到AX</li></ul><p>下面分别对这3个总线进行解释:</p></li><li><p>地址总线</p><ul><li><p>用来指定存储器单元，传送一条信息对应一个单元</p></li><li><p>如果一个CPU有10根地址总线，用二进制表示，就可以传输2^10 = 1024个不同的数据(0-1023)</p></li><li><p>下图展示了具有10根地址线的CPU向内存发出信息地址11时，10根地址线上传送的二进制信息</p><img src="/2021/01/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801/ass3.png" class></li></ul></li><li><p>数据总线</p><ul><li><p>数据总线的宽度决定了CPU和外界传输的速度，8根总线可以传送一个8位二进制(一个字节)</p></li><li><p>下图展示了8086CPU有16根数据总线，可以传输16位数据</p><img src="/2021/01/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801/ass4.png" class></li></ul></li><li><p>控制总线</p><ul><li>一根控制总线代表着CPU对外设的一种控制，宽度决定了CPU的控制能力</li><li>读和写操作分别有两根控制线负责。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">汇编指令是机器指令的助记符</span><br><span class="line">每一种CPU都有自己的汇编指令集</span><br><span class="line">CPU可以使用的信息在存储器中存放</span><br><span class="line">在存储器中指令和数据没有区别，都是二进制信息</span><br><span class="line">存储单元从0开始顺序编号</span><br><span class="line">一个存储单元可以存储8个bit,即8位二进制数</span><br><span class="line">1B &#x3D; 8bit, 1KB &#x3D; 1024B, 1MB &#x3D; 1024KB, 1GB &#x3D; 1024 MB</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>freeRTOS实时操作系统</title>
      <link href="2021/01/30/freeRTOS%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/01/30/freeRTOS%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>It is not the mountain we conquer but ourselves.<br>– Sir Edmund Hillary</p></blockquote><p>这是一篇总结自己在实习的时候最开始接触的一个项目：把freeRTOS操作系统移植到VEGAboard-一款以RISC-V为架构的开发板。大概是这个样子的：</p><img src="/2021/01/30/freeRTOS%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/vegaboard.jpg" class><p>关于硬件方面以及RISCV指令集，在这篇文章里不会提到。本篇的主要内容是对freeRTOS内核代码的简介，包括从硬件上电到主程序运行的过程。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>FreeRTOS的源码主要可以分成三大部分：1.用于处理任务（task）的代码，有大概一半的freeRTOS的代码用来处理task。其中task.c和task.h文件做了大部分创建和管理任务的工作。2.不同task之间的交流，在queue.c和queue.h文件里，任务或者中断之间可以互相发送数据以及使用semaphores和mutexes来通信和共享信息。3.还有一部分代码是用来沟通软件和硬件之间的代码，如port.c 和portasm.s。本文是以官方提供的blinky demo来举例。</p><h2 id="初始化和复位"><a href="#初始化和复位" class="headerlink" title="初始化和复位"></a>初始化和复位</h2><p>当开发板通电后，驱动程序（device driver）里的startup，以及链接文件用来初始化和复位：</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Reset Handler */</span></span><br><span class="line"><span class="symbol">Reset_Handler:</span></span><br><span class="line">    <span class="comment"># Disable global interrupt. */</span></span><br><span class="line">    csrci mstatus, <span class="number">8</span></span><br><span class="line">    <span class="comment"># initialize stack pointer</span></span><br><span class="line">    la <span class="built_in">sp</span>, __StackTop</span><br><span class="line">    <span class="comment"># initialize global pointer</span></span><br><span class="line">    la gp, __global_pointer</span><br></pre></td></tr></table></figure><p>为了保证整个startup的过程不受外设中断的影响，Reset_Handler首先会关闭全局中断(disable),然后初始化堆栈指针（la sp,__StackTOP)。紧接着，程序会执行SystemInit函数，这个函数的功能主要是相关寄存器的复位以及时钟的初始化，包括关闭看门狗(watchdog),初始化中断向量表的地址。在systemInit()中，下面的两行代码把Flash中的代码拷贝到RAM中运行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy_section(&amp;__etext, &amp;__data_start__, &amp;__data_end__);</span><br><span class="line">zero_section(&amp;__bss_start__, &amp;__bss_end__);</span><br></pre></td></tr></table></figure><p>然后跳转到main函数。</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable global interrupt. */</span></span><br><span class="line"><span class="symbol">csrsi</span> mstatus, <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">jal</span> main</span><br></pre></td></tr></table></figure><p>连接文件（RV32M1_ri5cy_flash.ld）用来初始化C语言的堆栈。比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   .data : AT(__DATA_ROM)</span><br><span class="line"> &#123;</span><br><span class="line">   . &#x3D; ALIGN(4);</span><br><span class="line">   __DATA_RAM &#x3D; .;</span><br><span class="line">   __data_start__ &#x3D; .;      &#x2F;* create a global symbol at data start *&#x2F;</span><br><span class="line">   *(.data)                 &#x2F;* .data sections *&#x2F;</span><br><span class="line">   *(.data*)                &#x2F;* .data* sections *&#x2F;</span><br><span class="line">   *(.sdata .sdata.*)</span><br><span class="line">   *(.heapsram*)            &#x2F;* This is only for the pulpino official test code. *&#x2F;</span><br><span class="line">   __noncachedata_start__ &#x3D; .;   &#x2F;* create a global symbol at ncache data start *&#x2F;</span><br><span class="line">*(NonCacheable)</span><br><span class="line">   __noncachedata_end__ &#x3D; .;     &#x2F;* define a global symbol at ncache data end *&#x2F;</span><br><span class="line">   KEEP(*(.jcr*))</span><br><span class="line">   . &#x3D; ALIGN(4);</span><br><span class="line">   __data_end__ &#x3D; .;        &#x2F;* define a global symbol at data end *&#x2F;</span><br><span class="line"> &#125; &gt; m_data</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.data 是C语言中已经初始化的变量，.bss是没有初始化的变量，没有初始化的值为零。以上就完成了变量的初始化。</p><h2 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h2><p>操作系统的内核代码（如task.c）通过port.c,portASM.S等文件与底层硬件交流。比如在task.h中有以下一行代码是使一个任务进入critical section来防止其他的任务进入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> taskENTER_CRITICAL()               portENTER_CRITICAL()</span></span><br></pre></td></tr></table></figure><p>这里的portENTER_CRITICAL()就是在portmarco.h里定义的，这样就使得task.c不用与底层的硬件交流，对于不同的硬件设备只需要更改port文件就可以。<br>portASM.S 是一个汇编接口文件，这个文件适用于所有的芯片。但它包含了一个特定于某个芯片的头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;freertos_risc_v_chip_specific_extensions.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>比如在本文中的demo里，这个头文件包含了针对RISC-V-RV32的一些额外寄存器的存储以及复位。这样就可以解决不同的芯片需要一些不同的寄存器。</p><h2 id="安排任务"><a href="#安排任务" class="headerlink" title="安排任务"></a>安排任务</h2><p>每一个任务需要被指定一个优先级，这个优先级的数字从0 到 configMAX_PRIORITIES-1 （在freeRTOSConfig.h里被定义）。如果configMAX_PRIORITIES被设置为5，那么每个任务可以使用0（最低），1，2，3，4（最高）作为优先的等级。<br>FreeRTOS使用一个准备列表（ready list）来收集所有准备运行的任务。定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRIVILEGED_DATA <span class="keyword">static</span> List_t pxReadyTasksLists[ configMAX_PRIORITIES ];</span><br></pre></td></tr></table></figure><p>比如，pxReadyTasksLists[1]是所有优先级为1且准备运行任务的列表。<br>vTaskSwitchContext()函数会终止现在的任务而选择优先级更高的任务然后把这个任务放入pxCurrentTCB：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> taskSELECT_HIGHEST_PRIORITY_TASK()                                </span></span><br><span class="line">&#123;                                                                         </span><br><span class="line">    UBaseType_t uxTopPriority = uxTopReadyPriority;                       </span><br><span class="line">                                                                          </span><br><span class="line">    <span class="comment">/* Find the highest priority queue that contains ready tasks. */</span>      </span><br><span class="line">    <span class="keyword">while</span>( listLIST_IS_EMPTY( &amp;( pxReadyTasksLists[ uxTopPriority ] ) ) ) </span><br><span class="line">    &#123;  </span><br><span class="line">        configASSERT( uxTopPriority );                                    </span><br><span class="line">        --uxTopPriority;                                                  </span><br><span class="line">    &#125;                                                                     </span><br><span class="line">                                                                          </span><br><span class="line">    <span class="comment">/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of </span></span><br><span class="line"><span class="comment">     * the  same priority get an equal share of the processor time. */</span>                    </span><br><span class="line">    listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &amp;( pxReadyTasksLists[ uxTopPriority ] ) ); </span><br><span class="line">    uxTopReadyPriority = uxTopPriority;                                                   </span><br><span class="line">&#125; <span class="comment">/* taskSELECT_HIGHEST_PRIORITY_TASK */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的函数确保了优先级高的任务先执行，首先要确保uxTopReadyPriority大于或等于有最高优先级的等待任务。在while循环里，从uxTopReadyPriority优先级开始，在pxReadyTasksLists[]里寻找准备任务的最高优先级。listGET_OWNER_OF_NEXT_ENTRY()函数可以从ready list里抓取下一个任务。<br>接下来pxCurrentTCB 指向最高优先级的任务，vTaskSwitchContext()就会使硬件执行任务。</p><h2 id="建立任务"><a href="#建立任务" class="headerlink" title="建立任务"></a>建立任务</h2><p>xTaskCreate用于创建新的任务。每一个任务都会有一个对应的TCB(task control block),TCB包含了任务的信息，包括任务名称，优先级，内存地址等。这些TCB都储存在一个堆栈里，pxPortInitialiseStack()函数会在新任务准备运行之前初始化堆栈。<br>以官方提供的demo为例(C:\FreeRTOS_RISCV\FreeRTOS\Demo\RISC-V_RV32M1_Vega_GCC_Eclipse\projects\RTOSDemo_ri5cy)。在main.c文件里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prvSetupHardware();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The mainCREATE_SIMPLE_BLINKY_DEMO_ONLY setting is described at the top</span></span><br><span class="line"><span class="comment">of this file. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( mainCREATE_SIMPLE_BLINKY_DEMO_ONLY == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">main_blinky();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">&#123;</span><br><span class="line">main_full();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>首先prvSetupHardware()用来初始化硬件，然后调用在main_full.c里的main_full()函数（因为mainCREATE_SIMPLE_BLINKY_DEMO_ONLY被设为0）。<br>在main_full()中，有三个任务被创建,其中前两个是 ‘register check’,用来检查register是否正常，他们被设置为最低优先级，以便被其他的任务覆盖。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xTaskCreate( prvRegTestTaskEntry1, <span class="comment">/* The function that implements the task. */</span></span><br><span class="line"><span class="string">&quot;Reg1&quot;</span>, <span class="comment">/* The name of the task. */</span></span><br><span class="line">mainREG_TEST_STACK_SIZE_WORDS,  <span class="comment">/* Size of stack to allocate for the task - in words not bytes!. */</span></span><br><span class="line">mainREG_TEST_TASK_1_PARAMETER,  <span class="comment">/* Parameter passed into the task. */</span></span><br><span class="line">tskIDLE_PRIORITY, <span class="comment">/* Priority of the task. */</span></span><br><span class="line"><span class="literal">NULL</span> );<span class="comment">/* Can be used to pass out a handle to the created task. */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>prvCheckTask()是用来检查所有的demo 任务以及上面的两个register check。当程序运行的时候，prvCheckTask()会在终端显示中打印一个 ‘pass’并且每成功一个循环(所有的demo和2个register test)都会打印一个 ‘.’，而且LED灯闪烁一次。最后 vTaskStartScheduler()使最高优先级的任务进入running mode(运行)。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了硬件上电后初始化的代码(主要为汇编代码)，链接硬件和软件的接口文件(port)。以及最基础的任务运行原理(高优先级替换低优先级)。经过一段时间的学习，我对freeRTOS及操作系统的理解还相对较浅。随着项目的深入和学习，更多关于此话题的文章会更新。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
